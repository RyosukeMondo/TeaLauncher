name: PR Validation

on:
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore TeaLauncher.Avalonia/TeaLauncher.Avalonia.csproj

    - name: Restore test dependencies
      run: dotnet restore TeaLauncher.Avalonia.Tests/TeaLauncher.Avalonia.Tests.csproj

    - name: Build application (with runtime specified)
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          dotnet build TeaLauncher.Avalonia/TeaLauncher.Avalonia.csproj --configuration Release --no-restore -r win-x64
        else
          dotnet build TeaLauncher.Avalonia/TeaLauncher.Avalonia.csproj --configuration Release --no-restore -r linux-x64
        fi
      shell: bash

    - name: Build tests
      run: dotnet build TeaLauncher.Avalonia.Tests/TeaLauncher.Avalonia.Tests.csproj --configuration Release --no-restore

    - name: Run tests
      run: dotnet test TeaLauncher.Avalonia.Tests/TeaLauncher.Avalonia.Tests.csproj --no-build --verbosity minimal --configuration Release

    - name: Run tests with coverage
      run: dotnet test TeaLauncher.Avalonia.Tests/TeaLauncher.Avalonia.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Install coverage report generator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool || dotnet tool update --global dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      shell: bash
      run: |
        reportgenerator \
          -reports:./coverage/**/coverage.cobertura.xml \
          -targetdir:./coverage-report \
          -reporttypes:"Html;Cobertura;MarkdownSummary"

    - name: Extract coverage percentage (Linux)
      if: runner.os == 'Linux'
      id: coverage-linux
      shell: bash
      run: |
        COVERAGE_FILE=$(find ./coverage -name "coverage.cobertura.xml" -type f | head -n 1)
        LINE_RATE=$(grep -oP '(?<=line-rate=")[0-9.]+' "$COVERAGE_FILE" | head -n 1)
        COVERAGE=$(echo "$LINE_RATE * 100" | bc)
        COVERAGE_INT=$(echo "$COVERAGE / 1" | bc)
        echo "coverage=$COVERAGE_INT" >> $GITHUB_OUTPUT
        echo "Coverage: ${COVERAGE_INT}%"

    - name: Extract coverage percentage (Windows)
      if: runner.os == 'Windows'
      id: coverage-windows
      shell: pwsh
      run: |
        $coverageFile = Get-ChildItem -Path ./coverage -Filter "coverage.cobertura.xml" -Recurse | Select-Object -First 1
        [xml]$xml = Get-Content $coverageFile.FullName
        $lineRate = [double]$xml.coverage.'line-rate'
        $coverage = [Math]::Floor($lineRate * 100)
        echo "coverage=$coverage" >> $env:GITHUB_OUTPUT
        Write-Host "Coverage: ${coverage}%"

    - name: Check coverage threshold (Linux/macOS)
      if: runner.os != 'Windows'
      run: bash scripts/check-coverage.sh

    - name: Check coverage threshold (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: bash scripts/check-coverage.sh

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-pr-${{ matrix.os }}
        path: ./coverage-report
        retention-days: 30

    - name: Check code metrics
      run: dotnet run --project tools/MetricsChecker/MetricsChecker.csproj -- TeaLauncher.Avalonia/TeaLauncher.Avalonia.csproj

    - name: Check code formatting
      run: dotnet format TeaLauncher.Avalonia/TeaLauncher.Avalonia.csproj --verify-no-changes

    - name: Comment coverage on PR (Linux only)
      if: runner.os == 'Linux' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = '${{ steps.coverage-linux.outputs.coverage }}';
          const threshold = 60;

          let summary = `### Coverage Report\n\n`;
          summary += `**Line Coverage:** ${coverage}%\n`;
          summary += `**Threshold:** ${threshold}%\n\n`;

          if (parseInt(coverage) >= threshold) {
            summary += '✅ Coverage threshold met!\n';
          } else {
            summary += `❌ Coverage below threshold (${coverage}% < ${threshold}%)\n`;
          }

          // Try to read the markdown summary if it exists
          try {
            const summaryPath = './coverage-report/Summary.md';
            if (fs.existsSync(summaryPath)) {
              const markdownSummary = fs.readFileSync(summaryPath, 'utf8');
              summary += '\n### Detailed Coverage\n\n' + markdownSummary;
            }
          } catch (error) {
            console.log('Could not read detailed summary:', error);
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
